Codigo com banco de dados da tela register!

-----------------------------------------------------------
import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput, TouchableOpacity } from 'react-native';
import RNPickerSelect from 'react-native-picker-select';
import * as Animatable from 'react-native-animatable';
import Parse from 'parse/react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

Parse.setAsyncStorage(AsyncStorage);
const Api_ID = 'Lea6nLduj3jDDWigyyoBEcO1N1VjeeFkqR20EZwp';
const JS_key = 'X2nYP56Y3FKwrLuwc0pQMNKv6IjhBknzjlhgNR3v';
Parse.initialize(Api_ID, JS_key);
Parse.serverURL = 'https://parseapi.back4app.com/';

export default function Register({ navigation }) {
  const [nome, setNome] = useState('');
  const [email, setEmail] = useState('');
  const [senha, setSenha] = useState('');
  const [tipoUsuario, setTipoUsuario] = useState('Paciente'); // Valor padrão 'Paciente'

  const registerUser = async () => {
    const Usuario = Parse.Object.extend('Usuario');
    const query = new Parse.Query(Usuario);

    // Verifica se o email já existe
    query.equalTo('Email', email);
    const results = await query.find();

    if (results.length > 0) {
      // Usuário com este email já existe
      console.error('Um usuário com este email já existe.');
    } else {
      // Cria um novo usuário
      const usuario = new Usuario();

      usuario.set({
        'Nome': nome,
        'Email': email,
        'Senha': senha,
        'TipoUsuario': tipoUsuario,
      });

      try {
        await usuario.save();
        console.log('Usuário registrado com sucesso!');
        // Aqui você pode adicionar navegação para a próxima tela, se necessário
        navigation.navigate('Login');
      } catch (error) {
        console.error('Erro ao registrar usuário:', error);
      }
    }
  };

  return (
    <View style={styles.container}>
      <Animatable.View animation="fadeInLeft" delay={500} style={styles.containerHeader}>
        <Text style={styles.message}>Cadastro</Text>
      </Animatable.View>

      <Animatable.View animation="fadeInUp" style={styles.containerForm}>
        <Text style={styles.title}>Nome Completo</Text>
        <TextInput
          placeholder="Digite seu nome completo..."
          style={styles.input}
          value={nome}
          onChangeText={(text) => setNome(text)}
        />

        <Text style={styles.title}>Email</Text>
        <TextInput
          placeholder="Digite seu email..."
          style={styles.input}
          value={email}
          onChangeText={(text) => setEmail(text)}
        />

        <Text style={styles.title}>Senha</Text>
        <TextInput
          placeholder="Digite sua senha..."
          secureTextEntry={true}
          style={styles.input}
          value={senha}
          onChangeText={(text) => setSenha(text)}
        />

        <Text style={styles.title}>Tipo de Usuário</Text>
        <RNPickerSelect
          style={pickerSelectStyles}
          onValueChange={(value) => setTipoUsuario(value)}
          items={[
            { label: 'Paciente', value: 'Paciente' },
            { label: 'Cuidador', value: 'Cuidador' },
          ]}
          value={tipoUsuario} // use o estado aqui
        />

        <TouchableOpacity style={styles.button} onPress={registerUser}>
          <Text style={styles.buttonText}>Cadastrar</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.buttonRegister} onPress={() => navigation.navigate('Login')}>
          <Text style={styles.registerText}>Já tenho uma conta. Quero fazer login!</Text>
        </TouchableOpacity>
      </Animatable.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black',
  },
  containerHeader: {
    marginTop: '14%',
    marginBottom: '8%',
    paddingStart: '5%',
  },
  message: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFF',
  },
  containerForm: {
    backgroundColor: '#FFF',
    flex: 1,
    borderTopLeftRadius: 25,
    borderTopRightRadius: 25,
    paddingStart: '5%',
    paddingEnd: '5%',
  },
  title: {
    fontSize: 20,
    marginTop: 28,
  },
  input: {
    borderBottomWidth: 1,
    height: 40,
    marginBottom: 12,
    fontSize: 16,
  },
  button: {
    backgroundColor: '#0b203d',
    width: '100%',
    borderRadius: 4,
    paddingVertical: 8,
    marginTop: 14,
    justifyContent: 'center',
    alignItems: 'center',
  },
  buttonText: {
    color: '#FFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  buttonRegister: {
    marginTop: 14,
    alignSelf: 'center',
  },
  registerText: {
    color: '#a1a1a1',
  },
});

const pickerSelectStyles = StyleSheet.create({
  inputIOS: {
    fontSize: 16,
    paddingVertical: 12,
    paddingHorizontal: 10,
    borderWidth: 1,
    borderColor: 'gray',
    borderRadius: 4,
    color: 'black',
    paddingRight: 30, // to ensure the text is never behind the icon
  },
  inputAndroid: {
    fontSize: 16,
    paddingHorizontal: 10,
    paddingVertical: 8,
    borderWidth: 0.5,
    borderColor: 'purple',
    borderRadius: 8,
    color: 'black',
    paddingRight: 30, // to ensure the text is never behind the icon
  },
});

PARTE 2 ------------------------------------------------

import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TextInput, TouchableOpacity, Alert } from 'react-native';
import RNPickerSelect from 'react-native-picker-select';
import * as Animatable from 'react-native-animatable';
import Parse from 'parse/react-native';

export default function Register({ navigation }) {
  const [infoNome, setInfoNome] = useState('');
  const [infoEmail, setInfoEmail] = useState('');
  const [infoSenha, setInfoSenha] = useState('');
  const [infoTipoUsuario, setInfoTipoUsuario] = useState('Paciente');

  const registerUser = async () => {
    if (infoNome === '' || infoEmail === '' || infoSenha === '' || infoTipoUsuario === '') {
      Alert.alert('Erro', 'Por favor, preencha todos os campos.');
      return;
    }

    try {
      // Verifica se o email já está cadastrado
      const Usuario = Parse.Object.extend('Usuario');
      const query = new Parse.Query(Usuario);
      query.equalTo('infoEmail', infoEmail);
      const user = await query.first();

      if (user) {
        Alert.alert('Erro', 'Este email já está cadastrado.');
        return;
      }

      // Cria um novo usuário na tabela Usuario
      const newUser = new Usuario();
      newUser.set('username', infoNome);
      newUser.set('password', infoSenha);
      newUser.set('infoEmail', infoEmail);
      newUser.set('infoNome', infoNome);
      newUser.set('infoTipoUsuario', infoTipoUsuario);

      await newUser.save();

      console.log('Usuário registrado com sucesso!');
      navigation.navigate('Login');
    } catch (error) {
      console.error('Erro ao registrar usuário:', error);
      Alert.alert('Erro', 'Falha ao registrar usuário. Por favor, tente novamente.');
    }
  };

  return (
    <View style={styles.container}>
      <Animatable.View animation="fadeInLeft" delay={500} style={styles.containerHeader}>
        <Text style={styles.message}>Cadastro</Text>
      </Animatable.View>

      <Animatable.View animation="fadeInUp" style={styles.containerForm}>
        <Text style={styles.title}>Nome Completo</Text>
        <TextInput
          placeholder="Digite seu nome completo..."
          style={styles.input}
          value={infoNome}
          onChangeText={(text) => setInfoNome(text)}
        />

        <Text style={styles.title}>Email</Text>
        <TextInput
          placeholder="Digite seu email..."
          style={styles.input}
          value={infoEmail}
          onChangeText={(text) => setInfoEmail(text)}
        />

        <Text style={styles.title}>Senha</Text>
        <TextInput
          placeholder="Digite sua senha..."
          secureTextEntry={true}
          style={styles.input}
          value={infoSenha}
          onChangeText={(text) => setInfoSenha(text)}
        />

        <Text style={styles.title}>Tipo de Usuário</Text>
        <RNPickerSelect
          style={pickerSelectStyles}
          onValueChange={(value) => setInfoTipoUsuario(value)}
          items={[
            { label: 'Selecione o tipo de usuário', value: '' }, // Placeholder
            { label: 'Paciente', value: 'Paciente' },
            { label: 'Cuidador', value: 'Cuidador' },
          ]}
          value={infoTipoUsuario}
        />

        <TouchableOpacity style={styles.button} onPress={registerUser}>
          <Text style={styles.buttonText}>Cadastrar</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.buttonRegister} onPress={() => navigation.navigate('Login')}>
          <Text style={styles.registerText}>Já tenho uma conta. Quero fazer login!</Text>
        </TouchableOpacity>
      </Animatable.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black',
  },
  containerHeader: {
    marginTop: '14%',
    marginBottom: '8%',
    paddingStart: '5%',
  },
  message: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFF',
  },
  containerForm: {
    backgroundColor: '#FFF',
    flex: 1,
    borderTopLeftRadius: 25,
    borderTopRightRadius: 25,
    paddingStart: '5%',
    paddingEnd: '5%',
  },
  title: {
    fontSize: 20,
    marginTop: 28,
  },
  input: {
    borderBottomWidth: 1,
    height: 40,
    marginBottom: 12,
    fontSize: 16,
  },
  button: {
    backgroundColor: '#0b203d',
    width: '100%',
    borderRadius: 4,
    paddingVertical: 8,
    marginTop: 14,
    justifyContent: 'center',
    alignItems: 'center',
  },
  buttonText: {
    color: '#FFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  buttonRegister: {
    marginTop: 14,
    alignSelf: 'center',
  },
  registerText: {
    color: '#a1a1a1',
  },
});

const pickerSelectStyles = StyleSheet.create({
  inputIOS: {
    fontSize: 16,
    paddingVertical: 12,
    paddingHorizontal: 10,
    borderWidth: 1,
    borderColor: 'gray',
    borderRadius: 4,
    color: 'black',
    paddingRight: 30,
  },
  inputAndroid: {
    fontSize: 16,
    paddingHorizontal: 10,
    paddingVertical: 8,
    borderWidth: 0.5,
    borderColor: 'purple',
    borderRadius: 8,
    color: 'black',
    paddingRight: 30,
  },
});


Tela Home originakl 


const HomeScreen = ({ navigation }) => {
  // Defina o estado isLogoClicked como um booleano
  const [isLogoClicked, setIsLogoClicked] = useState(false);

  // Defina o estado isLoggedIn como um booleano
  const [isLoggedIn, setIsLoggedIn] = useState(true);

  // Defina o nome do usuário como uma string
  const userName = 'Thales Juan';

  // Defina o estado isMenuVisible como um booleano
  const [isMenuVisible, setIsMenuVisible] = useState(false);

  // Defina o estado medications como um array vazio
  const [medications, setMedications] = useState([]);

  // Use o hook useRoute para acessar a rota
  const route = useRoute();

  // Use o hook useEffect para atualizar o estado medications quando a rota mudar
  useEffect(() => {
    // Verifique se a rota tem o parâmetro newMedication
    if (route.params?.newMedication) {
      // Extraia o novo medicamento da rota
      const newMedication = route.params.newMedication;
      // Atualize o estado medications, adicionando o novo medicamento no final do array
      setMedications([...medications, newMedication]);
    }
  }, [route.params?.newMedication]); // Execute o efeito somente quando o parâmetro newMedication mudar

  // Defina uma referência para a imagem do logo
  const imageRef = useRef(null);

  // Defina uma animação para girar o logo no sentido horário
  const rotateClockwise = {
    0: {
      rotate: '0deg',
    },
    1: {
      rotate: '360deg',
    },
  };

  // Defina uma animação para girar o logo no sentido anti-horário
  const rotateCounterClockwise = {
    0: {
      rotate: '0deg',
    },
    1: {
      rotate: '-360deg',
    },
  };

  // Defina uma função para lidar com o clique no logo
  const handleLogoClick = () => {
    // Alterne o estado isLogoClicked
    setIsLogoClicked(!isLogoClicked);
    // Se o logo foi clicado, execute a animação de girar no sentido horário
    if (isLogoClicked) {
      imageRef.current.animate(rotateClockwise, 1000);
    } else {
      // Se o logo não foi clicado, execute a animação de girar no sentido anti-horário
      imageRef.current.animate(rotateCounterClockwise, 1000);
    }
  };

  // Defina uma função para alternar a visibilidade do menu
  const toggleMenu = () => {
    // Alterne o estado isMenuVisible
    setIsMenuVisible(!isMenuVisible);
  };

  // Defina uma altura animada para a imagem do medicamento
  const imageHeight = useRef(new Animated.Value(0)).current;

  // Defina uma função para lidar com a alternância da imagem
  const handleImageToggle = () => {
    // Use a função Animated.timing para animar a altura da imagem
    Animated.timing(imageHeight, {
      toValue: imageHeight._value === 0 ? 200 : 0, // Alterne entre 0 e 200
      duration: 500, // Duração da animação em milissegundos
      useNativeDriver: false, // Use o driver nativo
    }).start(); // Inicie a animação
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={handleLogoClick}>
            <Animatable.Image
              ref={imageRef}
              source={require('../../../assets/LogomarcaOFC.jpg')}
              style={styles.logo}
              animation={isLogoClicked ? rotateCounterClockwise : rotateClockwise}
              duration={1000}
              useNativeDriver
            />
          </TouchableOpacity>
          {isLogoClicked && (
            <Animatable.Text animation="fadeIn" duration={1000} style={styles.appName}>
              Saúde na Hora Certa
            </Animatable.Text>
          )}
          <TouchableOpacity onPress={toggleMenu}>
            <Ionicons name="menu-outline" size={32} color="black" />
          </TouchableOpacity>
        </View>
        <View style={styles.greetingContainer}>
          <Text style={styles.greetingText}>
            Olá, {isLoggedIn ? `${userName}, bem vindo(a)` : 'bem vindo(a)'}
          </Text>
        </View>
        <Text style={styles.title}>Seus remédios:</Text>
        {/* Use o componente FlatList para renderizar a lista de medicamentos */}
        <FlatList
          data={medications} // Use o estado medications como a propriedade data
          renderItem={({ item }) => (
            <View style={styles.item}>
              <Text style={styles.itemText}>{item.name}</Text>
              <Text style={styles.itemText}>{item.dosage}</Text>
              <Text style={styles.itemText}>Dia: {item.day}</Text>
              <Text style={styles.itemText}>Hora: {item.time}</Text>
              <View style={styles.buttonContainer}>
                <TouchableOpacity style={styles.button} onPress={handleImageToggle}>
                  <Text style={styles.buttonText}>Ver Imagem</Text>
                </TouchableOpacity>
                <View style={styles.switchContainer}>
                  <Text style={styles.switchText}>Lembrete</Text>
                  <Switch />
                </View>
              </View>
              <Animated.Image
                style={{ height: imageHeight, width: '100%' }}
                source={{ uri: item.image }} // Use a propriedade image do item como a fonte da imagem
              />
              <TouchableOpacity
                style={styles.editButton}
                onPress={() => navigation.navigate('GerenciamentoMedicamentos')}
              >
                <Text style={styles.editButtonText}>Editar informações</Text>
              </TouchableOpacity>
            </View>
          )}
          keyExtractor={(item) => item.id} // Use a propriedade id do item como a chave
        />
        <Modal
          animationType="slide"
          transparent={true}
          visible={isMenuVisible}
          onRequestClose={() => {
            setIsMenuVisible(!isMenuVisible);
          }}
        >
          <BlurView style={styles.absolute} intensity={100} tint="dark">
            <View style={styles.menuContainer}>
              <TouchableOpacity style={styles.closeButton} onPress={toggleMenu}>
                <Ionicons name="close-outline" size={32} color="black" />
              </TouchableOpacity>

              <TouchableOpacity onPress={() => navigation.navigate('TelaPerfil')}>
                <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                  <Ionicons name="person-outline" size={24} color="black" />
                  <Text style={styles.menuItem}>Perfil</Text>
                </View>
              </TouchableOpacity>

              <TouchableOpacity onPress={() => navigation.navigate('TelaConfigurcao')}>
                <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                  <Ionicons name="settings-outline" size={24} color="black" />
                  <Text style={styles.menuItem}>Configuração</Text>
                </View>
              </TouchableOpacity>

              <TouchableOpacity onPress={() => navigation.navigate('TelaSobreNos')}>
                <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                  <Ionicons name="information-circle-outline" size={24} color="black" />
                  <Text style={styles.menuItem}>Sobre Nós</Text>
                </View>
              </TouchableOpacity>

              <TouchableOpacity onPress={() => navigation.navigate('Welcome')}>
                <View style={{ flexDirection: 'row', alignItems: 'center' }}>
                  <Ionicons name="log-out-outline" size={24} color="black" />
                  <Text style={styles.menuItem}>Sair</Text>
                </View>
              </TouchableOpacity>
            </View>
          </BlurView>
        </Modal>

        {/* Botão de Ação no Canto Inferior Direito */}
        <ActionButton buttonColor="#3498db">
          <ActionButton.Item
            buttonColor="#9b59b6"
            title="Adicionar Remédios"
            onPress={() => navigation.navigate('AddMedication')}
          >
            <Ionicons name="ios-add" style={styles.actionButtonIcon} />
          </ActionButton.Item>
          <ActionButton.Item
            buttonColor="#1abc9c"
            title="Ver Estoque"
            onPress={() => navigation.navigate('GerenciamentoMedicamentos')}
          >
            <Ionicons name="ios-list" style={styles.actionButtonIcon} />
          </ActionButton.Item>
          <ActionButton.Item
            buttonColor="#e74c3c"
            title="Ver Agenda"
            onPress={() => navigation.navigate('Agenda')}
          >
            <Ionicons name="ios-calendar" style={styles.actionButtonIcon} />
          </ActionButton.Item>
        </ActionButton>
      </View>
    </SafeAreaView>
  );
};